package P3;
import P2.ExceptionHandled;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by kelseyedge on 4/19/18.
 */
public class ConvertToComplex {

    List<Double> list = new ArrayList<Double>();
    File file;// = new File("/Users/kelseyedge/Desktop/Matrix/p1/src/main/resources/P3Q1tdata");
    BufferedReader reader = null;
    Complex[] out = new Complex[512];


    /**
     * Reads in data from file given by filepath into a list
     * @param filepath
     */
    public ConvertToComplex(String filepath){file=new File(filepath);readIn();}

    /**
     * Reads in a file of doubles and returns a list of Doubles and assigns it to this.list
     * @return ArrayList of Doubles
     */
    public List readIn(){

        try {
            reader = new BufferedReader(new FileReader(file));
            String text = null;

            while ((text = reader.readLine()) != null) {
                //creates list of doubles;
                list.add(Double.parseDouble(text));
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (IOException e) {
            }
        }

        //print out the list
        System.out.println(list);
    return list;
    }

    /**
     * Converts every number in this.list:Double to a Complex number
     * in the Complex[] this.out array
     * @throws ExceptionHandled
     */
    public Double[] psd() throws ExceptionHandled {

        //Make list of Complex numbers
        for (int i = 0; i < out.length; i++) {
            out[i]=new Complex(list.get(i),0);
        }

        // Find FFT of this.out data
        FFT fft_t  = new FFT();
        Complex[] completedFFT = fft_t.compute(out);

        //Find the PSD of the out.data after the FFT
        Double[] temp = new Double[512];
        Double magnitudeSquared;
        System.out.println("PSD :\n");

        // PSD = a^2 + b^2
        for (int i = 0; i < out.length; i++) {
            magnitudeSquared= Math.pow(completedFFT[i].re(),2) + Math.pow(completedFFT[i].im(),2);
            temp[i]=magnitudeSquared;
            System.out.println(temp[i].toString());
        }

        return temp;
    }

    public void makeListofComplexNumbers(){
        //Make list of Complex numbers
        for (int i = 0; i < out.length; i++) {
            out[i]=new Complex(list.get(i),0);
        }
    }

    /*
     * Find PSD given a vector of Doubles
     */
    public Double[] psd(Double[] myList) throws ExceptionHandled {

        //make list of Complex numbers
        for (int i = 0; i < out.length; i++) {
            out[i]=new Complex(myList[i],0);
        }

        // Find FFT of this.out data
        FFT fft_t  = new FFT();
        Complex[] completedFFT = fft_t.compute(out);

        //Find the PSD of the out.data after the FFT
        Double[] temp = new Double[512];
        Double magnitudeSquared;
        System.out.println("PSD :\n");
        //  PSD = | Z | ^2
        // | Z | = Sqrt(a^2+b^2)
        for (int i = 0; i < out.length; i++) {
            magnitudeSquared= Math.pow(completedFFT[i].re(),2) + Math.pow(completedFFT[i].im(),2);
            temp[i]=magnitudeSquared;
            System.out.println(temp[i].toString());
        }

        return temp;
    }

    /**
     * Question 2
     * v(t) = a sin(2π f (t-c)),
     * where a is the amplitude, f is the frequency, c is the phase shift of the signal,
     * and t ε  [0, 1). Consider two sine functions v1(t) and v2(t),
     * where both v1(t) and v2(t) have the same amplitude (a=1) and
     * the same phase shift (c=0). Also assume that the frequency for v1(t)
     * is f1 = 13 and for v2(t) assume f2 = 31.
     */
    public double doMath(double t, double frequency){
        int a=1;
        //int f1 = 13;
        //int f2 = 31;
        int c = 0;
        double temp = a*(  Math.sin(2*Math.PI * frequency * (t-c))  );
        return temp;
    }

    public void lowPass(){
        double fs = 1/512;

    }


    public static void main(String[] args) throws ExceptionHandled {

        /**
         * Question 1
         */
//        ConvertToComplex g1000 = new ConvertToComplex("/Users/kelseyedge/Desktop/Matrix/p1/src/main/resources/P3f1000");
//
//        ConvertToComplex f1000 = new ConvertToComplex("/Users/kelseyedge/Desktop/Matrix/p1/src/main/resources/P3g1000");
////        for (int i = 0; i < g1000.out.length; i++) {
////            g1000.out[i]=new Complex(g1000.list.get(i),0);
////        }
//        g1000.psd();

//        for (int i = 0; i < f50.list.size(); i++) {
//            System.out.println(f50.out[i]);
//        }

//        Find FFT of t data from question 1
//        FFT fft_t  = new FFT();
//        Complex[] completedFFT = fft_t.compute(g1000.out);
//
//
//        for (int i = 0; i < completedFFT.length; i++) {
//            System.out.println(completedFFT[i]);
//
//        }
//        //find PSD
//        // | Z |^2
//        // | Z | = Sqrt(a^2+b^2)
//        Double[] temp = new Double[512];
//        Double magnitudeSquared;
//        for (int i = 0; i < g1000.psd.length; i++) {
//            magnitudeSquared= Math.pow(completedFFT[i].re(),2) + Math.pow(completedFFT[i].im(),2);
//            temp[i]=magnitudeSquared;
//            System.out.println(temp[i].toString());
//        }

//
//        for (int i = 0; i < g1000.out.length; i++) {
//            f1000.out[i]=new Complex(f1000.list.get(i),0);
//        }
//
//        //f50(t)
//        FFT fft_tF  = new FFT();
//        Complex[] completedFFTF = fft_tF.compute(f1000.out);
//
//
//        for (int i = 0; i < completedFFTF.length; i++) {
//            System.out.println(completedFFTF[i]);
//
//        }
//        //find PSD
//        // | Z |^2
//        // | Z | = Sqrt(a^2+b^2)
//        Double[] tempF = new Double[512];
//        Double magnitudeSquaredF;
//        for (int i = 0; i < f1000.psd.length; i++) {
//            magnitudeSquaredF= Math.pow(completedFFTF[i].re(),2) + Math.pow(completedFFTF[i].im(),2);
//            tempF[i]=magnitudeSquaredF;
//            System.out.println(tempF[i].toString());
//        }

        /**
         * End of Question 1
         */

        /**
         * Question 2
         */

//        ConvertToComplex fData = new ConvertToComplex("/Users/kelseyedge/Desktop/Matrix/p1/src/main/resources/t");
//
//        Double[] v1 = new Double[512];
//        Double[] v2 = new Double[512];
//        Double[] xt = new Double[512];
//        Double[] yt = new Double[512];
//
//        for (int i = 0; i < fData.out.length; i++) {
//            v1[i]=fData.doMath(fData.list.get(i),13);
//            v2[i]=fData.doMath(fData.list.get(i),31);
//            xt[i]=v1[i]+v2[i];
//            yt[i]=v1[i]*v2[i];
//        }

//        fData.psd(xt);
//        fData.psd(yt);

        /**
         * End of Question 2
         */
    }
}
