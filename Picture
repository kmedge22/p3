package P3; /*************************************************************************
 *  Compilation:  java Picture.java
 *  Execution:    java Picture imagename
 *
 *  Data type for manipulating individual pixels of an image. The original
 *  image can be read from a file in jpg, gif, or png format, or the
 *  user can create a blank image of a given size. Includes methods for
 *  displaying the image in a window on the screen or saving to a file.
 *
 *  % java Picture mandrill.jpg
 *
 *  Remarks
 *  -------
 *   - pixel (x, y) is column x and row y, where (0, 0) is upper left
 *
 *   - see also GrayPicture.java for a grayscale version
 *
 *************************************************************************/

import P2.ExceptionHandled;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;


/**
 *  This class provides methods for manipulating individual pixels of
 *  an image. The original image can be read from a file in JPEG, GIF,
 *  or PNG format, or the user can create a blank image of a given size.
 *  This class includes methods for displaying the image in a window on
 *  the screen or saving to a file.
 *  <p>
 *  Pixel (x, y) is column x, row y, where (0, 0) is upper left.
 *  <p>
 *  For additional documentation, see
 *  <a href="http://www.cs.princeton.edu/introcs/31datatype">Section 3.1</a> of
 *  <i>Introduction to Programming in Java: An Interdisciplinary Approach</i>
 *  by Robert Sedgewick and Kevin Wayne.
 */
public final class Picture implements ActionListener {
    private BufferedImage image;    // the rasterized image
    private JFrame frame;           // on-screen view
    private String filename;        // name of file

   /**
     * Create an empty w-by-h picture.
     */
    public Picture(int w, int h) {
        image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        // set to TYPE_INT_ARGB to support transparency
        filename = w + "-by-" + h;
    }

   /**
     * Create a picture by reading in a .png, .gif, or .jpg from
     * the given filename or URL name.
     */
    public Picture(String filename) {
        this.filename = filename;
        try {
            // try to read from file in working directory
            File file = new File(filename);
            if (file.isFile()) {
                image = ImageIO.read(file);
            }

            // now try to read from file in same directory as this .class file
            else {
                URL url = getClass().getResource(filename);
                if (url == null) { url = new URL(filename); }
                image = ImageIO.read(url);
            }
        }
        catch (IOException e) {
            // e.printStackTrace();
            throw new RuntimeException("Could not open file: " + filename);
        }

        // check that image was read in
        if (image == null) {
            throw new RuntimeException("Invalid image file: " + filename);
        }
    }

   /**
     * Create a picture by reading in a .png, .gif, or .jpg from a File.
     */
    public Picture(File file) {
        try { image = ImageIO.read(file); }
        catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Could not open file: " + file);
        }
        if (image == null) {
            throw new RuntimeException("Invalid image file: " + file);
        }
    }

   /**
     * Return a JLabel containing this Picture, for embedding in a JPanel,
     * JFrame or other GUI widget.
     */
    public JLabel getJLabel() {
        if (image == null) { return null; }         // no image available
        ImageIcon icon = new ImageIcon(image);
        return new JLabel(icon);
    }

   /**
     * Display the picture in a window on the screen.
     */
    public void show() {

        // create the GUI for viewing the image if needed
        if (frame == null) {
            frame = new JFrame();

            JMenuBar menuBar = new JMenuBar();
            JMenu menu = new JMenu("File");
            menuBar.add(menu);
            JMenuItem menuItem1 = new JMenuItem(" Save...   ");
            menuItem1.addActionListener(this);
            menuItem1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,
                                     Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
            menu.add(menuItem1);
            frame.setJMenuBar(menuBar);



            frame.setContentPane(getJLabel());
            // f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setTitle(filename);
            frame.setResizable(false);
            frame.pack();
            frame.setVisible(true);
        }

        // draw
        frame.repaint();
    }

   /**
     * Return the height of the picture (in pixels).
     */
    public int height() {
        return image.getHeight(null);
    }

   /**
     * Return the width of the picture (in pixels).
     */
    public int width() {
        return image.getWidth(null);
    }

   /**
     * Return the Color of pixel (i, j).
     */
    public Color get(int i, int j) {
        return new Color(image.getRGB(i, j));
    }
    
    /**
     * Return the Color of pixel (i, j).
     */
    public Color[][] getColorArray() {
    	Color[][] c = new Color[height()][width()];
    	for(int i = 0; i < c[0].length; i++)
    		for(int j = 0; j < c.length; j++)
    			c[j][i] = new Color(image.getRGB(i, j));
        return c;
    }

   /**
     * Set the Color of pixel (i, j) to c.
     */
    public void set(int i, int j, int[] rgb) {
        Color temp = new Color(rgb[0],rgb[1],rgb[2]);
        image.setRGB(i, j, temp.getRGB());

    }

   /**
     * Save the picture to a file in a standard image format.
     * The filetype must be .png or .jpg.
     */
    public void save(String name) {
        save(new File(name));
    }

   /**
     * Save the picture to a file in a standard image format.
     */
    public void save(File file) {
        this.filename = file.getName();
        if (frame != null) { frame.setTitle(filename); }
        String suffix = filename.substring(filename.lastIndexOf('.') + 1);
        suffix = suffix.toLowerCase();
        if (suffix.equals("jpg") || suffix.equals("png")) {
            try { ImageIO.write(image, suffix, file); }
            catch (IOException e) { e.printStackTrace(); }
        }
        else {
            System.out.println("Error: filename must end in .jpg or .png");
        }
    }

   /**
     * Opens a save dialog box when the user selects "Save As" from the menu.
     */
    public void actionPerformed(ActionEvent e) {
        FileDialog chooser = new FileDialog(frame,
                             "Use a .png or .jpg extension", FileDialog.SAVE);
        chooser.setVisible(true);
        if (chooser.getFile() != null) {
            save(chooser.getDirectory() + File.separator + chooser.getFile());
        }
    }


   /**
     * Test client. Reads a picture specified by the command-line argument,
     * and shows it in a window on the screen.
     */
    public static void main(String[] args) throws ExceptionHandled {
        Picture pic = new Picture(512,512 );
        Picture pulse = new Picture(512,512 );

        Complex[][] pulseList = new Complex[512][512];
        Complex[][] colors = new Complex[512][512];

        System.out.printf("%d-by-%d\n", pic.width(), pic.height());
        for (int i = 0; i < 512; i++) {
            for (int j = 0; j < 512; j++) {
                colors[i][j]=new Complex(255,1);
            }

        }

        //set square
        for (int i = 220; i < 330; i++) {
            for (int j = 180; j < 320; j++) {
                pic.set(i, j, new int[]{255,255,255});
                colors[i][j]=new Complex(255,0);
            }

        }

        //set C area
        for (int i = 330-30; i < 330; i++) {
            for (int j = 180+25; j < 320-25; j++) {
                pic.set(i, j, new int[]{0,0,0});
                colors[i][j]=new Complex(0,0);
            }

        }



        FFT myFFT = new FFT();

        //Row by Row
        Complex[][] transpose =pic.transpose(colors);




        pic.show();
        for (int i = 0; i < 512; i++) {
            for (int j = 0; j < 512; j++) {
                pulse.set(i,j,new int[]{0,0,0});
                pulseList[i][j]=new Complex(0,0);
            }
        }

        //set baby C square
        for (int i = 0; i < 30; i++) {
            for (int j = 0; j < 120; j++) {
                pulse.set(i, j, new int[]{255,255,255});
                pulseList[i][j]=new Complex(255,0);
            }

        }

        //set baby C inner c
        for (int i = 15; i < 30; i++) {
            for (int j = 15; j < 120-15; j++) {
                pulse.set(i, j, new int[]{0,0,0});
                pulseList[i][j]=new Complex(0,0);
            }

        }

        //2D FFT

        Complex[][] signal2DFFT = pic.twoDFFT(colors,1);
        Complex[][] pulse2DFFT = pulse.twoDFFT(pulseList,1);
        Complex[][] product = colors.clone();

        for (int i = 0; i < 512; i++) {
            for (int j = 0; j < 512; j++) {
                product[i][j]=signal2DFFT[i][j].times(pulse2DFFT[i][j].conjugate());
            }
        }

        Complex[][]inverseFFT = pic.twoDFFT(product,-1);

        System.out.println("here: ");
        for (int i = 220; i < 221; i++) {
            for (int j = 0; j < 512; j++) {
                System.out.println(inverseFFT[i][j]);
            }

        }

        //Max Correlation (Red)

        double maxCorrelation =0;
        for (int i = 0; i < 512; i++) {
            for (int j = 0; j < 512; j++) {
                if(inverseFFT[i][j].re()>maxCorrelation){
                    maxCorrelation=inverseFFT[i][j].re();
                }
            }

        }

        //paint it red
        Picture correlated = new Picture(512,512);
        for (int i = 0; i < 512; i++) {
            for (int j = 0; j < 512; j++) {
                correlated.set(i,j,new int[]{0,0,0});
            }

        }
        double colorMeRed = .9 * maxCorrelation;
        for (int i = 0; i < 512; i++) {
            for (int j = 0; j < 512; j++) {
                int value = (int) Math.floor(pic.linear(inverseFFT[i][j].re(),maxCorrelation));
                correlated.set(i,j,new int[]{value,value,value});
//                if (inverseFFT[i][j].re()>colorMeRed){
////                    correlated.set(i,j,Color.red);
//                }

            }

        }
        pulse.show();


        correlated.show();












    }

    /**
     * Transposes a given matrix
     *
     * @return new Matrix
     */
    public Complex[][] transpose(Complex[][] mylist) {
        Complex[][] newMatrix = new Complex[mylist.length][mylist.length];
        for (int i = 0; i < 512; i++) {
            for (int j = 0; j < 512; j++) {
                newMatrix[j][i] = mylist[i][j];
            }
        }
        return newMatrix;
    }

    public Complex[][] twoDFFT(Complex[][] z, int direction) throws ExceptionHandled {
        FFT fft = new FFT();
        Complex[][] column_FFT = new Complex[512][512];
        Complex[][] row_FFT = new Complex[512][512];

        //Column FFT

        for (int i = 0; i < 512; i++) {
            Complex[] temp = new Complex[z.length];
            for (int j = 0; j < 512; j++) {
                temp[j]= z[j][i];

            }
            Complex[]tempFFT = fft.compute(temp,direction);
            for (int j = 0; j < 512; j++) {
                column_FFT[j][i]= tempFFT[j];
            }
        }

        //col fft
//        Picture pic = new Picture(512,512);
//        z = pic.transpose(z).clone();
//        for (int i = 0; i < column_FFT.length; i++) {
//            column_FFT[i]=fft.compute(z[i],1);
//        }
//        z = pic.transpose(z).clone();

        //Row FFT
        for (int i = 0; i < 512; i++) {
            row_FFT[i]=fft.compute(column_FFT[i],direction);
        }

        return row_FFT;
    }

    public double linear(double in, double max){
        return ((255/max)*in);
    }


}
